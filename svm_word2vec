{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e2cae695",
   "metadata": {},
   "source": [
    "Following https://medium.com/technovators/machine-learning-based-multi-label-text-classification-9a0e17f88bb4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "dab1f7b5",
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "12a09fd0",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.svm import LinearSVC\n",
    "from sklearn.multiclass import OneVsRestClassifier\n",
    "from sklearn.calibration import CalibratedClassifierCV\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn.preprocessing import MultiLabelBinarizer\n",
    "from sklearn import metrics\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import pickle\n",
    "import json\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import scipy\n",
    "import gensim\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "38659523",
   "metadata": {},
   "outputs": [],
   "source": [
    "train_dict = pickle.load(open('../nlp_project/train.pkl', 'rb'))\n",
    "valid_dict = pickle.load(open('../nlp_project/valid.pkl', 'rb'))\n",
    "test_dict = pickle.load(open('../nlp_project/test.pkl', 'rb'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9070ff0a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# combine valid and test - approx 80/20 split\n",
    "test_dict = {**valid_dict, **test_dict}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a3f1d507",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'input': '[Renin-Angiotensin-System (RAS) and COVID-19 - On The Prescription of RAS Blockers]. Twenty years ago, an enzyme homologous to the previously known angiotensin-converting enzyme (ACE) was identified, and subsequently named ACE2. In the renin-angiotensin system (RAS), ACE2 has counter-regulatory functions against the classical effector peptide angiotensin II, for example in blood pressure regulation and cardiovascular remodeling. However, ACE2 provides an initially unexpected interesting link between virology and cardiovascular medicine. That is, ACE2 represents the binding receptor for the cellular uptake of SARS-CoV and SARS-CoV-2 viruses. Thus, ACE2 is relevant for COVID-19. In this context, it was suspected that therapy with RAS blockers might promote transmission and complications of COVID-19 by upregulation of ACE2 expression. The aim of this short review is, to describe the link between the RAS, particularly ACE2, and COVID-19. Based on our analysis and evaluation of the available findings, we justify our conclusion: important drugs such as ACE inhibitors and angiotensin receptor blockers should continue to be prescribed according to guidelines to stable patients in the context of the COVID-19 pandemic.',\n",
       " 'label': 'Treatment;Mechanism',\n",
       " 'label_vec': [0, 0, 0, 0, 1, 0, 0, 1, 0],\n",
       " 'lemmas': ['Renin',\n",
       "  'Angiotensin',\n",
       "  'System',\n",
       "  'RAS',\n",
       "  'covid-19',\n",
       "  'Prescription',\n",
       "  'RAS',\n",
       "  'Blockers',\n",
       "  'twenty',\n",
       "  'year',\n",
       "  'ago',\n",
       "  'enzyme',\n",
       "  'homologous',\n",
       "  'previously',\n",
       "  'know',\n",
       "  'angiotensin',\n",
       "  'convert',\n",
       "  'enzyme',\n",
       "  'ACE',\n",
       "  'identify',\n",
       "  'subsequently',\n",
       "  'name',\n",
       "  'ACE2',\n",
       "  'renin',\n",
       "  'angiotensin',\n",
       "  'system',\n",
       "  'RAS',\n",
       "  'ACE2',\n",
       "  'counter',\n",
       "  'regulatory',\n",
       "  'function',\n",
       "  'classical',\n",
       "  'effector',\n",
       "  'peptide',\n",
       "  'angiotensin',\n",
       "  'II',\n",
       "  'example',\n",
       "  'blood',\n",
       "  'pressure',\n",
       "  'regulation',\n",
       "  'cardiovascular',\n",
       "  'remodeling',\n",
       "  'however',\n",
       "  'ACE2',\n",
       "  'provide',\n",
       "  'initially',\n",
       "  'unexpected',\n",
       "  'interesting',\n",
       "  'link',\n",
       "  'virology',\n",
       "  'cardiovascular',\n",
       "  'medicine',\n",
       "  'ACE2',\n",
       "  'represent',\n",
       "  'bind',\n",
       "  'receptor',\n",
       "  'cellular',\n",
       "  'uptake',\n",
       "  'SARS',\n",
       "  'CoV',\n",
       "  'SARS',\n",
       "  'CoV-2',\n",
       "  'virus',\n",
       "  'thus',\n",
       "  'ACE2',\n",
       "  'relevant',\n",
       "  'covid-19',\n",
       "  'context',\n",
       "  'suspect',\n",
       "  'therapy',\n",
       "  'RAS',\n",
       "  'blocker',\n",
       "  'might',\n",
       "  'promote',\n",
       "  'transmission',\n",
       "  'complication',\n",
       "  'covid-19',\n",
       "  'upregulation',\n",
       "  'ACE2',\n",
       "  'expression',\n",
       "  'aim',\n",
       "  'short',\n",
       "  'review',\n",
       "  'describe',\n",
       "  'link',\n",
       "  'RAS',\n",
       "  'particularly',\n",
       "  'ACE2',\n",
       "  'covid-19',\n",
       "  'base',\n",
       "  'analysis',\n",
       "  'evaluation',\n",
       "  'available',\n",
       "  'finding',\n",
       "  'justify',\n",
       "  'conclusion',\n",
       "  'important',\n",
       "  'drug',\n",
       "  'ACE',\n",
       "  'inhibitor',\n",
       "  'angiotensin',\n",
       "  'receptor',\n",
       "  'blocker',\n",
       "  'continue',\n",
       "  'prescribe',\n",
       "  'accord',\n",
       "  'guideline',\n",
       "  'stable',\n",
       "  'patient',\n",
       "  'context',\n",
       "  'COVID-19',\n",
       "  'pandemic'],\n",
       " 'embeddings': array([[-0.19891  , -0.1026   , -0.86307  , ...,  0.025575 , -0.32909  ,\n",
       "          0.20973  ],\n",
       "        [ 0.26232  , -0.074785 , -1.2471   , ...,  0.031366 , -0.39809  ,\n",
       "          0.041972 ],\n",
       "        [-0.56907  ,  0.29066  ,  0.40035  , ...,  0.49422  ,  0.32091  ,\n",
       "         -0.41983  ],\n",
       "        ...,\n",
       "        [-0.36578  ,  0.39335  , -0.74142  , ...,  0.45449  ,  0.025694 ,\n",
       "          0.17137  ],\n",
       "        [ 0.       ,  0.       ,  0.       , ...,  0.       ,  0.       ,\n",
       "          0.       ],\n",
       "        [-0.42666  ,  0.33154  , -0.0032541, ...,  0.27321  , -0.71865  ,\n",
       "          0.3213   ]], dtype=float32)}"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_dict[list(train_dict.keys())[0]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "8a3cbc4e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Save certain keys only\n",
    "\n",
    "def load_dict(d:dict):\n",
    "    \n",
    "    d_new = {i:{'input': d[i]['input'],\n",
    "                 'label': d[i]['label'].split(';'),\n",
    "                 'label_vec': d[i]['label_vec'], \n",
    "                 'lemmas': d[i]['lemmas']}\n",
    "              for i in d\n",
    "              if len(d[i]['lemmas']) != 0}\n",
    "    \n",
    "    return d_new\n",
    "\n",
    "\n",
    "train_dict = load_dict(train_dict)\n",
    "# valid_dict = load_dict(valid_dict)\n",
    "test_dict = load_dict(test_dict)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f6ce8f57",
   "metadata": {},
   "outputs": [],
   "source": [
    "train_data = pd.DataFrame.from_dict(train_dict, orient='index')\n",
    "# valid_data = pd.DataFrame.from_dict(valid_dict, orient='index')\n",
    "test_data = pd.DataFrame.from_dict(test_dict, orient='index')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "89e50454",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>input</th>\n",
       "      <th>label</th>\n",
       "      <th>label_vec</th>\n",
       "      <th>lemmas</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>PMID:32323279</th>\n",
       "      <td>[Renin-Angiotensin-System (RAS) and COVID-19 -...</td>\n",
       "      <td>[Treatment, Mechanism]</td>\n",
       "      <td>[0, 0, 0, 0, 1, 0, 0, 1, 0]</td>\n",
       "      <td>[Renin, Angiotensin, System, RAS, covid-19, Pr...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PMID:32678526</th>\n",
       "      <td>Weaning From Exogenous Sedation in the Era of ...</td>\n",
       "      <td>[Prevention]</td>\n",
       "      <td>[0, 0, 0, 0, 0, 1, 0, 0, 0]</td>\n",
       "      <td>[Weaning, Exogenous, Sedation, Era, COVID-19, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PMID:32302385</th>\n",
       "      <td>Letter: Rongeurs, Neurosurgeons, and COVID-19:...</td>\n",
       "      <td>[Prevention]</td>\n",
       "      <td>[0, 0, 0, 0, 0, 1, 0, 0, 0]</td>\n",
       "      <td>[letter, Rongeurs, Neurosurgeons, covid-19, pr...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PMID:32816435</th>\n",
       "      <td>Impact and Mechanism of Covid-19 on Mental Hea...</td>\n",
       "      <td>[]</td>\n",
       "      <td>[0, 0, 0, 0, 0, 0, 0, 0, 1]</td>\n",
       "      <td>[impact, Mechanism, Covid-19, Mental, Health, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PMID:32974671</th>\n",
       "      <td>The implications of vitamin D deficiency on CO...</td>\n",
       "      <td>[Treatment]</td>\n",
       "      <td>[0, 0, 0, 0, 0, 0, 0, 1, 0]</td>\n",
       "      <td>[implication, vitamin, deficiency, covid-19, r...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                           input  \\\n",
       "PMID:32323279  [Renin-Angiotensin-System (RAS) and COVID-19 -...   \n",
       "PMID:32678526  Weaning From Exogenous Sedation in the Era of ...   \n",
       "PMID:32302385  Letter: Rongeurs, Neurosurgeons, and COVID-19:...   \n",
       "PMID:32816435  Impact and Mechanism of Covid-19 on Mental Hea...   \n",
       "PMID:32974671  The implications of vitamin D deficiency on CO...   \n",
       "\n",
       "                                label                    label_vec  \\\n",
       "PMID:32323279  [Treatment, Mechanism]  [0, 0, 0, 0, 1, 0, 0, 1, 0]   \n",
       "PMID:32678526            [Prevention]  [0, 0, 0, 0, 0, 1, 0, 0, 0]   \n",
       "PMID:32302385            [Prevention]  [0, 0, 0, 0, 0, 1, 0, 0, 0]   \n",
       "PMID:32816435                      []  [0, 0, 0, 0, 0, 0, 0, 0, 1]   \n",
       "PMID:32974671             [Treatment]  [0, 0, 0, 0, 0, 0, 0, 1, 0]   \n",
       "\n",
       "                                                          lemmas  \n",
       "PMID:32323279  [Renin, Angiotensin, System, RAS, covid-19, Pr...  \n",
       "PMID:32678526  [Weaning, Exogenous, Sedation, Era, COVID-19, ...  \n",
       "PMID:32302385  [letter, Rongeurs, Neurosurgeons, covid-19, pr...  \n",
       "PMID:32816435  [impact, Mechanism, Covid-19, Mental, Health, ...  \n",
       "PMID:32974671  [implication, vitamin, deficiency, covid-19, r...  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "bfc53dcd",
   "metadata": {},
   "outputs": [],
   "source": [
    "comb_df=train_data.append(test_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "ce4c89e6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1238\n",
      "102\n",
      "CPU times: user 43.6 ms, sys: 240 µs, total: 43.8 ms\n",
      "Wall time: 43.1 ms\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "# Word2Vec the lemmas\n",
    "train_lemma_l = list(comb_df['lemmas'])\n",
    "max_lem_vals = max(len(x) for x in train_lemma_l)\n",
    "print(max_lem_vals)\n",
    "mean_lem_vals = sum(len(x) for x in train_lemma_l)/len(train_lemma_l)\n",
    "print(round(mean_lem_vals))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "d5404c94",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 6min 26s, sys: 5.08 s, total: 6min 31s\n",
      "Wall time: 2min 12s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "model = gensim.models.Word2Vec(train_lemma_l,\n",
    "                 vector_size=max_lem_vals) # picking a vector size higher than the mean lemma counts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "d6d22842",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('vaccination', 0.6648397445678711),\n",
       " ('cure', 0.5051326155662537),\n",
       " ('antiviral', 0.49977269768714905),\n",
       " ('countermeasure', 0.49201810359954834),\n",
       " ('immunization', 0.47565406560897827),\n",
       " ('candidate', 0.4679791331291199),\n",
       " ('discovery', 0.463651567697525),\n",
       " ('drug', 0.45453348755836487),\n",
       " ('eradication', 0.4531054198741913),\n",
       " ('BCG', 0.44754302501678467)]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.wv.most_similar(\"vaccine\")\n",
    "# testing out word similarities"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "e792b668",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1238"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "wordvectdict=dict(zip(model.wv.index_to_key,model.wv.vectors))\n",
    "len(wordvectdict[list(wordvectdict.keys())[0]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d1ab2cbb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PMID:32323279    [0, 0, 0, 0, 1, 0, 0, 1, 0]\n",
       "PMID:32678526    [0, 0, 0, 0, 0, 1, 0, 0, 0]\n",
       "PMID:32302385    [0, 0, 0, 0, 0, 1, 0, 0, 0]\n",
       "PMID:32816435    [0, 0, 0, 0, 0, 0, 0, 0, 1]\n",
       "PMID:32974671    [0, 0, 0, 0, 0, 0, 0, 1, 0]\n",
       "                            ...             \n",
       "PMID:32984792    [0, 0, 0, 0, 0, 0, 0, 1, 0]\n",
       "PMID:32882706    [0, 0, 0, 0, 1, 0, 0, 1, 0]\n",
       "PMID:32904944    [0, 0, 0, 0, 1, 0, 0, 1, 0]\n",
       "PMID:32837019    [0, 0, 0, 0, 0, 0, 0, 0, 1]\n",
       "PMID:32611659    [1, 0, 0, 0, 0, 0, 0, 0, 0]\n",
       "Name: label_vec, Length: 52416, dtype: object"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data[\"label_vec\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "b4faa34a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 81 ms, sys: 12 ms, total: 93 ms\n",
      "Wall time: 92.1 ms\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[0, 0, 0, 0, 0, 1, 0, 0, 1],\n",
       "       [0, 0, 0, 0, 0, 0, 1, 0, 0],\n",
       "       [0, 0, 0, 0, 0, 0, 1, 0, 0],\n",
       "       [1, 0, 0, 0, 0, 0, 0, 0, 0],\n",
       "       [0, 0, 0, 0, 0, 0, 0, 0, 1],\n",
       "       [0, 0, 1, 0, 0, 0, 0, 0, 0],\n",
       "       [1, 0, 0, 0, 0, 0, 0, 0, 0],\n",
       "       [0, 0, 0, 0, 0, 0, 1, 0, 0],\n",
       "       [0, 0, 0, 0, 0, 1, 0, 0, 1],\n",
       "       [0, 0, 1, 0, 0, 0, 0, 0, 1]])"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%time\n",
    "mlb = MultiLabelBinarizer()\n",
    "train_labels = mlb.fit_transform(train_data['label'])\n",
    "test_labels = mlb.transform(test_data['label'])\n",
    "train_labels[0:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "ceda619d",
   "metadata": {},
   "outputs": [],
   "source": [
    "class AverageEmbeddingVectorizer(object):\n",
    "    def __init__(self, word2vec):\n",
    "        self.word2vec = word2vec\n",
    "        self.dim =1238 # because we use the vector size assigned \n",
    "\n",
    "    def fit(self, X, y):\n",
    "        return self\n",
    "\n",
    "    def transform(self, X):\n",
    "        return np.array([\n",
    "            np.mean([self.word2vec[w] for w in words if w in self.word2vec]\n",
    "                    or [np.zeros(self.dim)], axis=0)\n",
    "            # if a text is empty we should return a vector of zeros\n",
    "            # with the same dimensionality as all the other vectors\n",
    "            for words in X\n",
    "        ])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "5c8a368f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# testing_output= np.array([\n",
    "#             np.mean([wordvectdict[w] for w in words if w in wordvectdict]\n",
    "#                     or [np.zeros(150)], axis=0)\n",
    "#             for words in train_data[\"lemmas\"]\n",
    "#         ])\n",
    "# testing_output[0:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "1d6b04b2",
   "metadata": {},
   "outputs": [],
   "source": [
    "pipe = Pipeline([(\"wordvect\",AverageEmbeddingVectorizer(wordvectdict)),\n",
    "                (\"multilabel\",OneVsRestClassifier(LinearSVC(), n_jobs=-1))])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "2d29668f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 24.6 s, sys: 2.97 s, total: 27.6 s\n",
      "Wall time: 4min 17s\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Pipeline(steps=[('wordvect',\n",
       "                 <__main__.AverageEmbeddingVectorizer object at 0x7f1f6b38fa60>),\n",
       "                ('multilabel',\n",
       "                 OneVsRestClassifier(estimator=LinearSVC(), n_jobs=-1))])"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%time\n",
    "pipe.fit(train_data['lemmas'],train_labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "67810a8e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 7.59 s, sys: 5.37 s, total: 13 s\n",
      "Wall time: 6.76 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "predicted=pipe.predict(test_data['lemmas'])\n",
    "svmpredDF = pipe.decision_function(test_data['lemmas'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "64b69c95",
   "metadata": {},
   "outputs": [],
   "source": [
    "pred_f = np.array(predicted)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "a182e634",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0, 0, 0, 0, 0, 1, 0, 0, 1],\n",
       "       [0, 0, 0, 0, 0, 0, 1, 0, 0],\n",
       "       [1, 0, 0, 0, 0, 0, 0, 0, 0],\n",
       "       [0, 0, 0, 0, 0, 0, 0, 0, 1],\n",
       "       [0, 0, 1, 0, 0, 0, 0, 0, 0]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_labels[0:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "d362e5be",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0, 0, 0, 0, 0, 1, 0, 0, 1],\n",
       "       [0, 0, 0, 0, 0, 0, 0, 0, 0],\n",
       "       [1, 0, 0, 0, 0, 0, 1, 0, 0],\n",
       "       [0, 0, 0, 0, 0, 0, 0, 0, 1],\n",
       "       [0, 0, 1, 0, 0, 0, 0, 0, 0],\n",
       "       [1, 0, 0, 0, 0, 0, 0, 0, 0],\n",
       "       [0, 0, 0, 0, 0, 1, 0, 0, 1],\n",
       "       [0, 0, 1, 0, 0, 0, 0, 0, 1],\n",
       "       [0, 0, 0, 0, 0, 0, 1, 0, 0],\n",
       "       [0, 0, 1, 0, 0, 0, 0, 0, 0]])"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pred_f[0:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "44195742",
   "metadata": {},
   "outputs": [],
   "source": [
    "with open('map_labels.json', 'r') as f:\n",
    "    map_labels = json.load(f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "b7aa06e2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                      precision    recall  f1-score   support\n",
      "\n",
      "         Case Report       0.89      0.55      0.68       773\n",
      "           Diagnosis       0.90      0.61      0.73       297\n",
      "Epidemic Forecasting       0.87      0.69      0.77       954\n",
      "        General Info       0.94      0.59      0.72       104\n",
      "           Mechanism       1.00      0.06      0.11        18\n",
      "          Prevention       0.92      0.76      0.83       685\n",
      "        Transmission       0.84      0.78      0.81      1625\n",
      "           Treatment       0.77      0.15      0.25       153\n",
      "                           0.88      0.80      0.84      1347\n",
      "\n",
      "           micro avg       0.87      0.71      0.78      5956\n",
      "           macro avg       0.89      0.55      0.64      5956\n",
      "        weighted avg       0.87      0.71      0.77      5956\n",
      "         samples avg       0.75      0.72      0.73      5956\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/max/python/AML/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1248: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in samples with no predicted labels. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    }
   ],
   "source": [
    "print(metrics.classification_report(test_labels, pred_f, target_names=map_labels.keys()))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "cb5c4cb0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.93453766, 0.98128737, 0.96103343, 0.99595998, 0.97208702,\n",
       "       0.98264429, 0.94324878, 0.97873768, 0.96500063])"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "metrics.roc_auc_score(test_labels, svmpredDF, average=None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "483ba6fd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.6086381665932128"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "metrics.coverage_error(test_labels, svmpredDF)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "51b66e07",
   "metadata": {},
   "outputs": [],
   "source": [
    "confusion_matrix = metrics.multilabel_confusion_matrix(test_labels, pred_f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c5902a5f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'General Info')"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 8))\n",
    "\n",
    "disp1 = metrics.ConfusionMatrixDisplay(confusion_matrix[0]).plot(ax=ax1)\n",
    "disp1.ax_.set_title('Mechanism')\n",
    "\n",
    "disp2 = metrics.ConfusionMatrixDisplay(confusion_matrix[1]).plot(ax=ax2)\n",
    "disp2.ax_.set_title('General Info')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "53a5207a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6337593653591891"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy_score(test_labels, pred_f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "74d44291",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7823104023734471"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f1_score(test_labels, pred_f, average='micro')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "002f3b43",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8734989648033127"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "precision_score(test_labels, pred_f, average='micro')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "bc0ee96b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7083613163196776"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/max/python/AML/lib/python3.8/site-packages/sklearn/svm/_base.py:985: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\"Liblinear failed to converge, increase \"\n",
      "/home/max/python/AML/lib/python3.8/site-packages/sklearn/svm/_base.py:985: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\"Liblinear failed to converge, increase \"\n",
      "/home/max/python/AML/lib/python3.8/site-packages/sklearn/svm/_base.py:985: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\"Liblinear failed to converge, increase \"\n",
      "/home/max/python/AML/lib/python3.8/site-packages/sklearn/svm/_base.py:985: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\"Liblinear failed to converge, increase \"\n",
      "/home/max/python/AML/lib/python3.8/site-packages/sklearn/svm/_base.py:985: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\"Liblinear failed to converge, increase \"\n",
      "/home/max/python/AML/lib/python3.8/site-packages/sklearn/svm/_base.py:985: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\"Liblinear failed to converge, increase \"\n",
      "/home/max/python/AML/lib/python3.8/site-packages/sklearn/svm/_base.py:985: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\"Liblinear failed to converge, increase \"\n",
      "/home/max/python/AML/lib/python3.8/site-packages/sklearn/svm/_base.py:985: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\"Liblinear failed to converge, increase \"\n",
      "/home/max/python/AML/lib/python3.8/site-packages/sklearn/svm/_base.py:985: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\"Liblinear failed to converge, increase \"\n"
     ]
    }
   ],
   "source": [
    "recall_score(test_labels, pred_f, average='micro')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0911c972",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
